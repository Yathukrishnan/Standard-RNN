# Build the model
model = Sequential()
model.add(Embedding(input_dim=10000, output_dim=128, input_length=200))
model.add(SimpleRNN(128, return_sequences=False))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
history = model.fit(x_train, y_train, epochs=5, batch_size=64, validation_split=0.2)

# Get final validation loss and accuracy
sloss = history.history['loss'][-1]
sacc = history.history['accuracy'][-1]

# Evaluate the model on test data and print final test loss and accuracy
stest_loss, stest_acc = model.evaluate(x_test, y_test)

# Print final validation and test loss/accuracy
print(f'Final Training Loss: {sloss:.4f}')
print(f'Final Training Accuracy: {sacc:.4f}')
print(f'Test Loss: {stest_loss:.4f}')
print(f'Test Accuracy: {stest_acc:.4f}')

# Predict for a sample test sequence
test_sequence = np.reshape(x_test[7], (1, -1))
predictions = model.predict(test_sequence)[0]
print('Positive Review' if int(predictions[0]) == 1 else 'Negative Review')
